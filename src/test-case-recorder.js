import { chromium, firefox, webkit } from 'playwright';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import ora from 'ora';
import inquirer from 'inquirer';
import ConfigManager from './config-manager.js';

class TestCaseRecorder {
  constructor(options = {}) {
    this.options = options;
    this.configManager = new ConfigManager();
    this.config = this.configManager.config;
    this.testCasesPath = path.join(process.cwd(), 'config', 'test-cases.json');
    this.testCases = this.loadTestCases();
    this.recordedSteps = [];
    this.screenshots = [];
    this.browserType = options.browser || 'chromium';
  }

  /**
   * „Éñ„É©„Ç¶„Ç∂„Çø„Ç§„Éó„Å´Âøú„Åò„ÅüPlaywright„Éñ„É©„Ç¶„Ç∂„ÇíÂèñÂæó
   */
  getBrowser(type) {
    const browsers = {
      'chromium': chromium,
      'firefox': firefox,
      'webkit': webkit,
      'chrome': chromium,
      'safari': webkit
    };
    return browsers[type.toLowerCase()] || chromium;
  }

  loadTestCases() {
    try {
      if (fs.existsSync(this.testCasesPath)) {
        const data = fs.readFileSync(this.testCasesPath, 'utf8');
        return JSON.parse(data);
      }
    } catch (error) {
      console.error(chalk.red('„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπË™≠„ÅøËæº„Åø„Ç®„É©„Éº:'), error.message);
    }
    
    return {
      test_cases: [],
      last_updated: new Date().toISOString(),
      version: '1.0.0'
    };
  }

  async startRecording(url) {
    console.log(chalk.cyan('\nüé¨ Èå≤Áîª„É¢„Éº„Éâ„Åß„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ‰ΩúÊàêÈñãÂßã\n'));
    console.log(chalk.yellow('„Éí„É≥„Éà: „Éñ„É©„Ç¶„Ç∂„ÅßÊìç‰Ωú„ÇíË°å„ÅÜ„Å®„ÄÅËá™ÂãïÁöÑ„Å´„ÉÜ„Çπ„Éà„Çπ„ÉÜ„ÉÉ„Éó„ÅåË®òÈå≤„Åï„Çå„Åæ„Åô'));
    console.log(chalk.yellow('Èå≤Áîª„ÇíÁµÇ‰∫Ü„Åô„Çã„Å´„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Çã„Åã„ÄÅCtrl+C „ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n'));

    const spinner = ora('„Éñ„É©„Ç¶„Ç∂„ÇíËµ∑Âãï‰∏≠...').start();
    
    // Èå≤Áîª„Éá„Éº„Çø„ÅÆÂàùÊúüÂåñ
    this.recording = {
      name: '',
      url: url,
      startTime: new Date().toISOString(),
      endTime: '',
      actions: [],
      screenshots: []
    };
    
    try {
      // URL„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
      const cleanUrl = url.replace(/\/+$/, '').replace(/\/+/g, '/').replace(':/', '://');
      this.recording.url = cleanUrl;
      
      // „Éñ„É©„Ç¶„Ç∂„Çø„Ç§„Éó„Å´Âøú„Åò„Å¶Ëµ∑Âãï
      const browserToUse = this.getBrowser(this.browserType);
      const browserName = this.browserType.toLowerCase();
      
      console.log(chalk.cyan(`üåê ‰ΩøÁî®„Éñ„É©„Ç¶„Ç∂: ${browserName.toUpperCase()}`));
      
      const browser = await browserToUse.launch({
        headless: false,
        args: browserName === 'chromium' || browserName === 'chrome' ? [
          '--lang=ja-JP', 
          '--font-render-hinting=none',
          '--disable-autofill',
          '--disable-save-password-bubble',
          '--disable-password-generation'
        ] : []
      });

      // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà‰ΩúÊàêÔºàÈå≤ÁîªÊ©üËÉΩ‰ªò„ÅçÔºâ
      const videosDir = path.join(process.cwd(), 'recordings');
      if (!fs.existsSync(videosDir)) {
        fs.mkdirSync(videosDir, { recursive: true });
      }

      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
      const videoPath = path.join(videosDir, `recording-${timestamp}.webm`);

      const context = await browser.newContext({
        locale: 'ja-JP',
        timezoneId: 'Asia/Tokyo',
        ignoreHTTPSErrors: true,
        bypassCSP: true,
        recordVideo: this.options.video !== false ? {
          dir: videosDir,
          size: { width: 1280, height: 720 }
        } : undefined
      });

      const page = await context.newPage();

      // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅÆË®≠ÂÆö
      await this.setupRecordingListeners(page, cleanUrl);

      spinner.text = `${cleanUrl} „Å´„Ç¢„ÇØ„Çª„Çπ‰∏≠...`;
      
      // ÂàùÊúü„Çπ„ÉÜ„ÉÉ„ÉóÔºöURL„Ç¢„ÇØ„Çª„ÇπÔºà„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Å®waitUntil„ÇíË™øÊï¥Ôºâ
      try {
        await page.goto(cleanUrl, { 
          waitUntil: 'domcontentloaded',
          timeout: 60000 
        });
        await page.waitForTimeout(2000);
      } catch (error) {
        if (error.name === 'TimeoutError') {
          console.log(chalk.yellow('\n‚ö†Ô∏è „Éö„Éº„Ç∏„ÅÆË™≠„ÅøËæº„Åø„Å´ÊôÇÈñì„Åå„Åã„Åã„Çä„Åæ„Åó„Åü„Åå„ÄÅÈå≤Áîª„ÇíÁ∂öË°å„Åó„Åæ„Åô'));
        } else {
          throw error;
        }
      }
      this.recordedSteps.push({
        step_number: this.recordedSteps.length + 1,
        action: 'navigate',
        target: cleanUrl,
        description: '„Éö„Éº„Ç∏„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„Çã',
        timestamp: new Date().toISOString()
      });

      // ÂàùÊúü„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
      await this.captureScreenshot(page, 'initial');

      spinner.succeed('Èå≤ÁîªÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ„Éñ„É©„Ç¶„Ç∂„ÅßÊìç‰Ωú„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ');

      // „Éñ„É©„Ç¶„Ç∂„ÅåÈñâ„Åò„Çâ„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
      await new Promise((resolve) => {
        browser.on('disconnected', () => {
          // „Ç§„É≥„Çø„Éº„Éê„É´„Çí„ÇØ„É™„Ç¢
          if (this.recordingInterval) {
            clearInterval(this.recordingInterval);
          }
          resolve();
        });
        
        // Ctrl+C „Åß„ÇÇÁµÇ‰∫Ü„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
        process.on('SIGINT', async () => {
          console.log(chalk.yellow('\n\nÈå≤Áîª„ÇíÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô...'));
          // „Ç§„É≥„Çø„Éº„Éê„É´„Çí„ÇØ„É™„Ç¢
          if (this.recordingInterval) {
            clearInterval(this.recordingInterval);
          }
          await browser.close();
          resolve();
        });
      });

      // Èå≤Áîª„Çí‰øùÂ≠ò
      if (this.options.video !== false) {
        await context.close();
        console.log(chalk.green(`‚úÖ Èå≤Áîª‰øùÂ≠ò: ${videoPath}`));
      }

      // Èå≤Áîª„Éá„Éº„Çø„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
      await this.saveRecordingData();

      // „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÁîüÊàê
      const testCase = await this.generateTestCaseFromRecording();
      
      // „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„Çí‰øùÂ≠ò
      await this.saveTestCase(testCase);

      console.log(chalk.green('\n‚úÖ „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÅÆÈå≤Áîª„Å®ÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ'));
      
      return testCase;

    } catch (error) {
      spinner.fail('Èå≤Áîª„Ç®„É©„Éº');
      console.error(chalk.red('„Ç®„É©„Éº:'), error.message);
      throw error;
    }
  }

  async setupRecordingListeners(page, baseUrl) {
    // „Éö„Éº„Ç∏ÂÜÖ„Åß„Ç§„Éô„É≥„Éà„ÇíÁõ£Ë¶ñ„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà„ÇíÊ≥®ÂÖ•
    await page.evaluate(() => {
      window.__recordedActions = [];
      
      // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÅÆÁõ£Ë¶ñ
      document.addEventListener('click', (e) => {
        const target = e.target;
        const tagName = target.tagName.toLowerCase();
        const text = target.textContent?.trim().substring(0, 30) || '';
        const id = target.id;
        const className = target.className;
        
        window.__recordedActions.push({
          type: 'click',
          tagName,
          text,
          id,
          className,
          timestamp: new Date().toISOString()
        });
      }, true);
      
      // ÂÖ•Âäõ„Ç§„Éô„É≥„Éà„ÅÆÁõ£Ë¶ñ
      document.addEventListener('input', (e) => {
        const target = e.target;
        if (target.tagName.toLowerCase() === 'input' || target.tagName.toLowerCase() === 'textarea') {
          window.__recordedActions.push({
            type: 'input',
            tagName: target.tagName.toLowerCase(),
            name: target.name,
            id: target.id,
            value: target.value,
            timestamp: new Date().toISOString()
          });
        }
      }, true);
      
      // „Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„ÅÆÂ§âÊõ¥Áõ£Ë¶ñ
      document.addEventListener('change', (e) => {
        const target = e.target;
        if (target.tagName.toLowerCase() === 'select') {
          window.__recordedActions.push({
            type: 'select',
            name: target.name,
            id: target.id,
            value: target.value,
            timestamp: new Date().toISOString()
          });
        }
      }, true);
    });
    
    // ÂÆöÊúüÁöÑ„Å´„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂèñÂæó
    const recordingInterval = setInterval(async () => {
      try {
        const actions = await page.evaluate(() => {
          const recorded = window.__recordedActions || [];
          window.__recordedActions = [];
          return recorded;
        });
        
        for (const action of actions) {
          if (action.type === 'click') {
            const selector = action.id ? `#${action.id}` : 
                           action.className ? `.${action.className.split(' ')[0]}` :
                           `${action.tagName}:has-text("${action.text}")`;
            
            this.recordedSteps.push({
              step_number: this.recordedSteps.length + 1,
              action: 'click',
              target: selector,
              description: `„Äå${action.text || selector}„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ`,
              timestamp: action.timestamp
            });
            
            await this.captureScreenshot(page, `step-${this.recordedSteps.length}`);
          } else if (action.type === 'input') {
            const selector = action.id ? `#${action.id}` : 
                           action.name ? `[name="${action.name}"]` :
                           action.tagName;
            
            this.recordedSteps.push({
              step_number: this.recordedSteps.length + 1,
              action: 'fill',
              target: selector,
              value: action.value,
              description: `${action.name || action.id || '„Éï„Ç£„Éº„É´„Éâ'}„Å´„Äå${action.value}„Äç„ÇíÂÖ•Âäõ`,
              timestamp: action.timestamp
            });
          } else if (action.type === 'select') {
            const selector = action.id ? `#${action.id}` : 
                           action.name ? `[name="${action.name}"]` :
                           'select';
            
            this.recordedSteps.push({
              step_number: this.recordedSteps.length + 1,
              action: 'select',
              target: selector,
              value: action.value,
              description: `${action.name || action.id || '„Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ'}„Åß„Äå${action.value}„Äç„ÇíÈÅ∏Êäû`,
              timestamp: action.timestamp
            });
          }
        }
      } catch (error) {
        // „Éö„Éº„Ç∏„ÅåÈñâ„Åò„Çâ„Çå„ÅüÂ†¥Âêà„Å™„Å©„ÅÆ„Ç®„É©„Éº„ÇíÁÑ°Ë¶ñ
      }
    }, 500);
    
    // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Ç§„Éô„É≥„Éà
    page.on('framenavigated', async (frame) => {
      if (frame === page.mainFrame()) {
        const currentUrl = page.url();
        if (currentUrl !== baseUrl) {
          this.recordedSteps.push({
            step_number: this.recordedSteps.length + 1,
            action: 'navigate',
            target: currentUrl,
            description: 'Êñ∞„Åó„ÅÑ„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª',
            timestamp: new Date().toISOString()
          });

          await this.captureScreenshot(page, `navigate-${this.recordedSteps.length}`);
        }
      }
    });
    
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÅÆ„Åü„ÇÅ„Å´„Ç§„É≥„Çø„Éº„Éê„É´„Çí‰øùÂ≠ò
    this.recordingInterval = recordingInterval;
  }

  async getSelector(element) {
    // Ë¶ÅÁ¥†„ÅÆ„Çª„É¨„ÇØ„Çø„ÇíÂèñÂæóÔºàÂÑ™ÂÖàÈ†Ü‰Ωç: id > name > class > textÔºâ
    const id = await element.getAttribute('id');
    if (id) return `#${id}`;

    const name = await element.getAttribute('name');
    if (name) return `[name="${name}"]`;

    const className = await element.getAttribute('class');
    if (className) {
      const classes = className.split(' ').filter(c => c.length > 0);
      if (classes.length > 0) return `.${classes[0]}`;
    }

    const tagName = await element.tagName();
    const text = await element.textContent();
    if (text) {
      return `${tagName.toLowerCase()}:has-text("${text.substring(0, 30)}")`;
    }

    return tagName.toLowerCase();
  }

  async captureScreenshot(page, prefix) {
    const screenshotsDir = path.join(process.cwd(), 'screenshots');
    if (!fs.existsSync(screenshotsDir)) {
      fs.mkdirSync(screenshotsDir, { recursive: true });
    }
    
    const filename = `${prefix}_${Date.now()}.png`;
    const filepath = path.join(screenshotsDir, filename);
    
    await page.screenshot({
      path: filepath,
      fullPage: true
    });
    
    this.screenshots.push(`screenshots/${filename}`);
    return `screenshots/${filename}`;
  }

  async generateTestCaseFromRecording() {
    console.log(chalk.cyan('\nüìù Èå≤Áîª„Åã„Çâ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÁîüÊàê‰∏≠...\n'));

    // „ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÊÉÖÂ†±„ÇíÂÖ•Âäõ
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÂêç:',
        default: `Èå≤Áîª„ÉÜ„Çπ„Éà_${new Date().toISOString().slice(0, 10)}`
      },
      {
        type: 'input',
        name: 'category',
        message: '„Ç´„ÉÜ„Ç¥„É™:',
        default: 'UIÊìç‰Ωú'
      },
      {
        type: 'list',
        name: 'priority',
        message: 'ÂÑ™ÂÖàÂ∫¶:',
        choices: ['High', 'Medium', 'Low'],
        default: 'Medium'
      },
      {
        type: 'input',
        name: 'expectedResult',
        message: 'ÊúüÂæÖÁµêÊûú:',
        default: 'Êìç‰Ωú„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åô„Çã'
      }
    ]);

    const testId = this.generateTestId();
    const credentials = this.config.test_targets?.[0]?.login_credentials;
    const baseUrl = this.recordedSteps[0]?.target || this.config.test_targets?.[0]?.base_url || 'http://localhost:3000';

    // Ë®òÈå≤„Åï„Çå„Åü„Çπ„ÉÜ„ÉÉ„Éó„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    const cleanSteps = this.recordedSteps.map((step, index) => {
      let description = step.description;

      // Ë™çË®ºÊÉÖÂ†±„Çí„Éû„Çπ„ÇØ„Åæ„Åü„ÅØÁΩÆÊèõ
      if (step.value) {
        if (step.value === credentials?.user?.email || 
            step.value === credentials?.admin?.email) {
          description = description.replace(step.value, '${user.email}');
        } else if (step.value === credentials?.user?.password || 
                   step.value === credentials?.admin?.password) {
          description = description.replace(step.value, '${user.password}');
        }
      }

      return {
        step_number: index + 1,
        action: step.action,
        target: step.target,
        value: step.value,
        description: description
      };
    });

    // Playwright„Ç≥„Éº„Éâ„ÇíÁîüÊàê
    const playwrightCode = this.generatePlaywrightCode(cleanSteps, baseUrl);

    return {
      test_id: testId,
      test_category: answers.category,
      test_case_name: answers.name,
      priority: answers.priority,
      target_url: baseUrl,
      preconditions: `${baseUrl}„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ`,
      test_steps: cleanSteps,
      expected_result: answers.expectedResult,
      test_data: {
        generated_by: 'Èå≤Áîª„É¢„Éº„Éâ',
        source_url: baseUrl,
        generation_date: new Date().toISOString(),
        recording_duration: this.calculateDuration()
      },
      generated_playwright_code: playwrightCode,
      screenshots: this.screenshots,
      created_date: new Date().toISOString(),
      updated_date: new Date().toISOString()
    };
  }

  generatePlaywrightCode(steps, baseUrl) {
    let code = `// „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ: ${steps.length}„Çπ„ÉÜ„ÉÉ„Éó\n`;
    code += `test('Èå≤Áîª„Åï„Çå„Åü„ÉÜ„Çπ„Éà', async ({ page }) => {\n`;
    
    steps.forEach(step => {
      switch (step.action) {
        case 'navigate':
          code += `  await page.goto('${step.target}');\n`;
          break;
        case 'click':
          code += `  await page.click('${step.target}');\n`;
          break;
        case 'fill':
          code += `  await page.fill('${step.target}', '${step.value || ''}');\n`;
          break;
        case 'select':
          code += `  await page.selectOption('${step.target}', '${step.value || ''}');\n`;
          break;
        default:
          code += `  // ${step.description}\n`;
      }
    });
    
    code += `});\n`;
    return code;
  }

  calculateDuration() {
    if (this.recordedSteps.length < 2) return '0Áßí';
    
    const start = new Date(this.recordedSteps[0].timestamp);
    const end = new Date(this.recordedSteps[this.recordedSteps.length - 1].timestamp);
    const durationMs = end - start;
    
    const seconds = Math.floor(durationMs / 1000);
    const minutes = Math.floor(seconds / 60);
    
    if (minutes > 0) {
      return `${minutes}ÂàÜ${seconds % 60}Áßí`;
    }
    return `${seconds}Áßí`;
  }

  generateTestId() {
    const existingIds = this.testCases.test_cases.map(tc => tc.test_id);
    let id = 1;
    let testId;
    
    do {
      testId = `TC${String(id).padStart(3, '0')}`;
      id++;
    } while (existingIds.includes(testId));
    
    return testId;
  }

  async saveTestCase(testCase) {
    this.testCases.test_cases.push(testCase);
    this.testCases.last_updated = new Date().toISOString();
    
    fs.writeFileSync(this.testCasesPath, JSON.stringify(this.testCases, null, 2), 'utf8');
    console.log(chalk.green(`‚úÖ „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ ${testCase.test_id} „Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü`));
  }

  async saveRecordingData() {
    // Èå≤Áîª„Éá„Éº„Çø„ÅÆÁµÇ‰∫ÜÊôÇÂàª„ÇíË®≠ÂÆö
    this.recording.endTime = new Date().toISOString();
    
    // Èå≤ÁîªÂêç„ÇíË®≠ÂÆöÔºàURL„Åã„ÇâÁîüÊàêÔºâ
    if (!this.recording.name) {
      const urlObj = new URL(this.recording.url);
      this.recording.name = `${urlObj.hostname} Èå≤Áîª - ${new Date().toLocaleString()}`;
    }
    
    // Èå≤Áîª„Éá„Éº„Çø„Å´„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†
    this.recording.actions = this.recording.actions || [];
    
    // recordedSteps„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„Çå„Çíactions„Å´Â§âÊèõ
    if (this.recordedSteps && this.recordedSteps.length > 0) {
      this.recordedSteps.forEach(step => {
        this.recording.actions.push({
          type: step.action,
          target: step.target,
          value: step.value,
          description: step.description,
          timestamp: step.timestamp,
          xpath: step.target // XPath„Å®„Åó„Å¶„ÇÇ‰øùÂ≠ò
        });
      });
    }
    
    // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíËøΩÂä†
    this.recording.screenshots = this.screenshots || [];
    
    // „Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
    const filename = `recording-${timestamp}.json`;
    const filepath = path.join(process.cwd(), 'recordings', filename);
    
    // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    const recordingsDir = path.join(process.cwd(), 'recordings');
    if (!fs.existsSync(recordingsDir)) {
      fs.mkdirSync(recordingsDir, { recursive: true });
    }
    
    // Èå≤Áîª„Éá„Éº„Çø„Çí‰øùÂ≠ò
    fs.writeFileSync(filepath, JSON.stringify(this.recording, null, 2), 'utf8');
    console.log(chalk.green(`üìπ Èå≤Áîª„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü: recordings/${filename}`));
    
    return filename;
  }

  async listRecordings() {
    const recordingsDir = path.join(process.cwd(), 'recordings');
    
    if (!fs.existsSync(recordingsDir)) {
      console.log(chalk.yellow('‚ö†Ô∏è  Èå≤Áîª„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'));
      return;
    }

    const files = fs.readdirSync(recordingsDir)
      .filter(file => file.endsWith('.json'))
      .map(file => {
        const filepath = path.join(recordingsDir, file);
        const stats = fs.statSync(filepath);
        
        try {
          const content = JSON.parse(fs.readFileSync(filepath, 'utf8'));
          
          return {
            filename: file,
            name: content.name || 'Unnamed',
            url: content.url,
            actions: content.actions?.length || 0,
            created: stats.mtime,
            size: (stats.size / 1024).toFixed(1) + ' KB'
          };
        } catch (error) {
          // JSON„Éë„Éº„Çπ„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
          return null;
        }
      })
      .filter(file => file !== null)
      .sort((a, b) => b.created - a.created);

    if (files.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  Èå≤Áîª„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'));
      return;
    }

    console.log(chalk.cyan('\nüìπ Èå≤ÁîªÊ∏à„Åø„Éï„Ç°„Ç§„É´‰∏ÄË¶ß\n'));
    console.log(chalk.gray('‚îÄ'.repeat(80)));
    
    files.forEach((file, index) => {
      console.log(`${chalk.cyan(`[${index + 1}]`)} ${chalk.white(file.filename)}`);
      console.log(`    ${chalk.gray('ÂêçÂâç:')} ${file.name}`);
      console.log(`    ${chalk.gray('URL:')} ${file.url}`);
      console.log(`    ${chalk.gray('„Ç¢„ÇØ„Ç∑„Éß„É≥Êï∞:')} ${file.actions}`);
      console.log(`    ${chalk.gray('‰ΩúÊàêÊó•ÊôÇ:')} ${file.created.toLocaleString()}`);
      console.log(`    ${chalk.gray('„Çµ„Ç§„Ç∫:')} ${file.size}`);
      console.log();
    });
  }

  async playRecording(filename, options = {}) {
    // „Éï„Ç°„Ç§„É´Êã°ÂºµÂ≠ê„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (!filename.endsWith('.json')) {
      console.error(chalk.red(`‚ùå JSON„Éï„Ç°„Ç§„É´„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂãïÁîª„Éï„Ç°„Ç§„É´Ôºà.webmÔºâ„Åß„ÅØ„Å™„Åè„ÄÅÈå≤Áîª„Éá„Éº„Çø„Éï„Ç°„Ç§„É´Ôºà.jsonÔºâ„ÅåÂøÖË¶Å„Åß„Åô`));
      console.log(chalk.yellow(`„Éí„É≥„Éà: ./web-test play --list „ÅßÂà©Áî®ÂèØËÉΩ„Å™Èå≤Áîª„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ`));
      return;
    }
    
    const recordingPath = path.join(process.cwd(), 'recordings', filename);
    
    if (!fs.existsSync(recordingPath)) {
      console.error(chalk.red(`‚ùå „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${filename}`));
      return;
    }

    const recording = JSON.parse(fs.readFileSync(recordingPath, 'utf8'));
    const spinner = ora('ÂÜçÁîüÊ∫ñÂÇô‰∏≠...').start();

    const browser = await chromium.launch({ 
      headless: options.headless || false,
      slowMo: 500 / (options.speed || 1) 
    });
    
    try {
      const context = await browser.newContext({
        viewport: { width: 1280, height: 720 },
        recordVideo: {
          dir: path.join(process.cwd(), 'recordings', 'videos'),
          size: { width: 1280, height: 720 }
        }
      });

      const page = await context.newPage();
      spinner.text = 'Èå≤ÁîªÂÜÖÂÆπ„ÇíÂÜçÁîü‰∏≠...';

      // „Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂÜçÁîü
      for (const action of recording.actions) {
        spinner.text = `ÂÆüË°å‰∏≠: ${action.type} - ${action.description || ''}`;
        
        try {
          switch (action.type) {
            case 'navigation':
            case 'navigate':
              try {
                await page.goto(action.url || action.target, { 
                  waitUntil: 'domcontentloaded',
                  timeout: 60000 
                });
                await page.waitForTimeout(1000);
              } catch (navError) {
                if (navError.name === 'TimeoutError') {
                  console.log(chalk.yellow(`‚ö†Ô∏è „Éö„Éº„Ç∏Ë™≠„ÅøËæº„Åø„Çø„Ç§„É†„Ç¢„Ç¶„Éà: ${action.url || action.target}`));
                } else {
                  throw navError;
                }
              }
              break;
              
            case 'click':
              await page.click(action.xpath || action.target);
              break;
              
            case 'input':
            case 'fill':
              await page.fill(action.xpath || action.target, action.value || '');
              break;
              
            case 'select':
              await page.selectOption(action.xpath || action.target, action.value || '');
              break;
              
            default:
              console.log(chalk.gray(`  ‚è≠Ô∏è  ‰∏çÊòé„Å™„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action.type}`));
          }
          
          // ÂêÑ„Ç¢„ÇØ„Ç∑„Éß„É≥Âæå„Å´Â∞ë„ÅóÂæÖÊ©ü
          await page.waitForTimeout(1000 / (options.speed || 1));
        } catch (error) {
          console.error(chalk.yellow(`‚ö†Ô∏è  „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å„Ç®„É©„Éº: ${error.message}`));
        }
      }

      spinner.succeed('ÂÜçÁîüÂÆå‰∫ÜÔºÅ');
      
      // ÊúÄÂæå„ÅÆÁä∂ÊÖã„ÇíÂ∞ë„ÅóË°®Á§∫
      await page.waitForTimeout(3000);
      
      // „ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÁîüÊàê„ÅÆÁ¢∫Ë™ç
      if (options.noGenerate !== true) {
        if (options.autoGenerate) {
          // Ëá™ÂãïÁîüÊàê„É¢„Éº„ÉâÔºö„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅßÁîüÊàê
          await this.generateTestCaseFromRecordingFile(recording, filename, true);
        } else {
          // ÂØæË©±Âºè„É¢„Éº„Éâ
          const generateAnswer = await inquirer.prompt([
            {
              type: 'confirm',
              name: 'generate',
              message: '„Åì„ÅÆÈå≤Áîª„Åã„Çâ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÁîüÊàê„Åó„Åæ„Åô„ÅãÔºü',
              default: true
            }
          ]);
          
          if (generateAnswer.generate) {
            await this.generateTestCaseFromRecordingFile(recording, filename);
          }
        }
      }
      
    } catch (error) {
      spinner.fail('ÂÜçÁîü‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
      console.error(chalk.red(error.message));
    } finally {
      await browser.close();
    }
  }

  async interactivePlayback() {
    const recordingsDir = path.join(process.cwd(), 'recordings');
    
    if (!fs.existsSync(recordingsDir)) {
      console.log(chalk.yellow('‚ö†Ô∏è  Èå≤Áîª„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'));
      return;
    }

    const files = fs.readdirSync(recordingsDir)
      .filter(file => file.endsWith('.json'))
      .map(file => {
        const content = JSON.parse(fs.readFileSync(path.join(recordingsDir, file), 'utf8'));
        return {
          name: `${file} - ${content.name || 'Unnamed'} (${content.actions?.length || 0} actions)`,
          value: file
        };
      });

    if (files.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  Èå≤Áîª„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'));
      return;
    }

    const answers = await inquirer.prompt([
      {
        type: 'list',
        name: 'file',
        message: 'ÂÜçÁîü„Åô„ÇãÈå≤Áîª„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
        choices: files
      },
      {
        type: 'number',
        name: 'speed',
        message: 'ÂÜçÁîüÈÄüÂ∫¶ (0.5-5):',
        default: 1,
        validate: (value) => value >= 0.5 && value <= 5
      },
      {
        type: 'confirm',
        name: 'headless',
        message: '„Éò„ÉÉ„Éâ„É¨„Çπ„É¢„Éº„Éâ„ÅßÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü',
        default: false
      }
    ]);

    await this.playRecording(answers.file, {
      speed: answers.speed,
      headless: answers.headless
    });
  }

  async generateTestCaseFromRecordingFile(recording, filename, useDefaults = false) {
    console.log(chalk.cyan('\nüìù Èå≤Áîª„Åã„Çâ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÁîüÊàê‰∏≠...\n'));

    // „Éá„Éï„Ç©„É´„ÉàÂÄ§„Çí‰ΩøÁî®„Åô„Çã„Åã„ÄÅÂØæË©±ÂºèÂÖ•Âäõ„ÇíË°å„ÅÜ„Åã
    const answers = useDefaults ? {
      name: recording.name || 'Untitled Test',
      category: 'E2E„ÉÜ„Çπ„Éà',
      priority: '‰∏≠',
      expectedResult: 'Êìç‰Ωú„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åô„Çã„Åì„Å®'
    } : await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÂêç:',
        default: recording.name || 'Untitled Test'
      },
      {
        type: 'list',
        name: 'category',
        message: '„Ç´„ÉÜ„Ç¥„É™„Éº:',
        choices: ['Ê©üËÉΩ„ÉÜ„Çπ„Éà', 'UI„ÉÜ„Çπ„Éà', 'Áµ±Âêà„ÉÜ„Çπ„Éà', 'E2E„ÉÜ„Çπ„Éà', '„Åù„ÅÆ‰ªñ'],
        default: 'E2E„ÉÜ„Çπ„Éà'
      },
      {
        type: 'list',
        name: 'priority',
        message: 'ÂÑ™ÂÖàÂ∫¶:',
        choices: ['È´ò', '‰∏≠', '‰Ωé'],
        default: '‰∏≠'
      },
      {
        type: 'input',
        name: 'expectedResult',
        message: 'ÊúüÂæÖÁµêÊûú:',
        default: 'Êìç‰Ωú„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åô„Çã„Åì„Å®'
      }
    ]);

    // „Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„ÉÜ„Çπ„Éà„Çπ„ÉÜ„ÉÉ„Éó„Å´Â§âÊèõ
    const testSteps = recording.actions.map((action, index) => {
      let description = action.description || '';
      
      // „Çπ„ÉÜ„ÉÉ„Éó„ÅÆË™¨Êòé„ÇíÁîüÊàê
      if (!description) {
        switch (action.type) {
          case 'navigation':
          case 'navigate':
            description = `${action.url || action.target}„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„Çã`;
            break;
          case 'click':
            description = `${action.target}„Çí„ÇØ„É™„ÉÉ„ÇØ`;
            break;
          case 'input':
          case 'fill':
            description = `${action.target}„Å´„Äå${action.value}„Äç„ÇíÂÖ•Âäõ`;
            break;
          case 'select':
            description = `${action.target}„Åß„Äå${action.value}„Äç„ÇíÈÅ∏Êäû`;
            break;
          default:
            description = action.type;
        }
      }

      return {
        step_number: index + 1,
        action: action.type,
        target: action.target || action.xpath,
        value: action.value,
        description: description
      };
    });

    // Playwright„Ç≥„Éº„Éâ„ÇíÁîüÊàê
    const playwrightCode = this.generatePlaywrightCode(testSteps, recording.url);

    // „ÉÜ„Çπ„Éà„Ç±„Éº„ÇπID„ÇíÁîüÊàê
    const testId = this.generateTestId();

    const testCase = {
      test_id: testId,
      test_category: answers.category,
      test_case_name: answers.name,
      priority: answers.priority,
      target_url: recording.url,
      preconditions: `${recording.url}„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ`,
      test_steps: testSteps,
      expected_result: answers.expectedResult,
      test_data: {
        generated_by: 'Èå≤Áîª„É¢„Éº„Éâ',
        source_file: filename,
        source_url: recording.url,
        generation_date: new Date().toISOString(),
        recording_duration: this.calculateDurationFromRecording(recording)
      },
      generated_playwright_code: playwrightCode,
      screenshots: recording.screenshots || [],
      created_date: new Date().toISOString(),
      updated_date: new Date().toISOString()
    };

    // „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„Çí‰øùÂ≠ò
    await this.saveTestCase(testCase);

    console.log(chalk.green('\n‚úÖ „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÅÆÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ'));
    console.log(chalk.cyan(`„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπID: ${testId}`));
    
    return testCase;
  }

  calculateDurationFromRecording(recording) {
    if (!recording.startTime || !recording.endTime) return '‰∏çÊòé';
    
    const start = new Date(recording.startTime);
    const end = new Date(recording.endTime);
    const durationMs = end - start;
    
    const seconds = Math.floor(durationMs / 1000);
    const minutes = Math.floor(seconds / 60);
    
    if (minutes > 0) {
      return `${minutes}ÂàÜ${seconds % 60}Áßí`;
    }
    return `${seconds}Áßí`;
  }
}

export default TestCaseRecorder;